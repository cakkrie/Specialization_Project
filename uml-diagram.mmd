---
config:
  theme: redux
  layout: dagre
---
classDiagram
    direction RL
    
    class RecommendationEngine {
        modelType: string
        trainingData: dataset
        weighting: map
        recentSpots: list
        fishActivityModel: mlmodel
        +generateRecommendation(user, weather)
        +updateModel(data)
        +predictBiteProbability(spot,time)
        +rankSpots(spots)
    }
    
    class Spot {
        spotID: string
        location: geopoint
        distance: float
        region: string
        weather: WeatherData
        fishingScore: float
        fishSpecies: list
        fishPopularity: float
        +getCurrentWeather()
        +getRecommendedTimeWindow()
        +calculateScore(user)
        +updateFishPopularity()
    }
    
    class Catch {
        catchID: string
        fishSpecies: string
        length: float
        weight: float
        timeCaught: datetime
        location: geopoint
        photoURL: string
        emotion: list
        weather: WeatherData
        +updatePhoto(photo)
        +identifySpecies(photo)
        +addEmotionTag(tag)
    }
    
    class WeatherData {
        temperature: float
        humidity: float
        airPressure: float
        windSpeed: float
        moonPhase: float
        tidelevel: string
        sunrise/sunset: datetime
        +fetchFromAPI(lat, lon)
        +analyzeFishingWindow()
        +compareWithIdealConditions()
    }
    
    class User {
        userID: string
        password: string
        fishingLevel: int
        catchFishSpecies: list
        Emotion: list
        homeLocation: geopoint
        +login(username, password)
        +updatedProfile()
        +updateCatch()
        +trackEmotion()
        +joinChallenge()
    }
    
    class FishingSession {
        userID: string
        sessionID: string
        location: geopoint
        startTime/EndTime: datetime
        weather: WeatherData
        catchFish: list
        emotion: list
        +startSession()
        +endSession()
        +recordCatch()
        +updateWeather(weather)
        +analyzePerformance()
    }
    
    class EmotionAI {
        emotionModel: ml
        emotionHistory: list
        +detectEmotion(emotion)
        +logEmotionChanges(emotion, perf)
        +generateEncouragement(emotion)
        +updateRewardSystem()
    }
    
    class MapUI {
        mapLayer: map
        selectedSpot: Spot
        weatherOverlay: boolean
        +displaySpots(spots)
        +toggleWeatherOverlay()
        +updateUserPosition(loc)
        +emotionOverlay(level)
    }
    
    class ARSession {
        sessionID: string
        cameraConfig: struct
        recognizedObjects: list
        anchorPoints: list
        activeOverlay: boolean
        +initializeAR()
        +detectSurrounding(photo)
        +detectFish(photo)
        +display3DOverlay(data)
        +recordARCatch()
    }
    
    FishingSession <-- User
    RecommendationEngine <-- User
    EmotionAI <-- User
    Catch <.. User
    Spot <-- Catch
    WeatherData <-- Spot
    Catch <.. FishingSession
    MapUI <-- Catch
    ARSession <-- MapUI
    
    class RecommendationEngine:::Ash
    class Spot:::normal_class
    class Catch:::normal_class
    class WeatherData:::normal_class
    class User:::Sky
    class FishingSession:::Ash
    class EmotionAI:::Ash
    class MapUI:::normal_class
    class ARSession:::Ash
    
    classDef Aqua stroke:#46EDC8, fill:#DEFFF8, color:#378E7A
    classDef Sky stroke:#374D7C, fill:#E2EBFF, color:#374D7C
    classDef Ash stroke:#999999, fill:#EEEEEE, color:#000000
    classDef normal_class stroke:#757575, fill:#FFFFFF, color:#757575